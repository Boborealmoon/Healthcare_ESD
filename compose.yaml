volumes:
  pgdata: 
  rabbitmq_data:

networks:
  kong-net:
    driver: bridge

version: "3.8"

services:
  ####################################
  # RabbitMQ: The messaging broker   
  ####################################
  rabbitmq:
    image: rabbitmq:3-management
    hostname: esd-rabbit
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes: 
      - ./rabbitmq.config:/etc/rabbitmq/rabbitmq.config
      - ./rabbitmq_definitions.json:/etc/rabbitmq/rabbitmq_definitions.json
      - rabbitmq_data:/var/lib/rabbitmq


  #######################################
  # Postgres: The database used by Kong
  #######################################
  kong-database:
    image: postgres:15 # tested 20231101; Ref: https://docs.konghq.com/gateway/latest/support/third-party/
    platform: linux/amd64  # <- required for Mac M1 chip. Otherwise, can remove
    restart: always
    networks:
      - kong-net
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  #######################################
  # Kong database migration
  #######################################
  kong-migration:
    image: kong/kong-gateway:3.2.2.5 # tested 20231101
    platform: linux/amd64  # <- required for Mac M1 chip. Otherwise, can remove
    command: "kong migrations bootstrap"
    restart: on-failure
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
    depends_on:
      - kong-database

  #######################################
  # Kong: The API Gateway
  #######################################
  kong:
    image: kong/kong-gateway:3.2.2.5 # tested 20231101
    platform: linux/amd64  # <- required for Mac M1 chip. Otherwise, can remove
    restart: always
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    depends_on:
      - kong-migration
    ports: # https://docs.konghq.com/gateway/latest/production/networking/default-ports/
      - "8000:8000" # Takes incoming HTTP traffic from Consumers, and forwards it to upstream Services.
      - "8443:8443" # Takes incoming HTTPS traffic from Consumers, and forwards it to upstream Services.
      - "8001:8001" # Admin API. Listens for calls from the command line over HTTP.
      - "8444:8444" # Admin API. Listens for calls from the command line over HTTPS.
      - "8002:8002" # Kong Manager (GUI). Listens for HTTP traffic.
      - "8445:8445" # Kong Manager (GUI). Listens for HTTPS traffic.
      - "8003:8003" # Dev Portal. Listens for HTTP traffic, assuming Dev Portal is enabled.
      - "8446:8446" # Dev Portal. Listens for HTTP traffic, assuming Dev Portal is enabled.
      - "8004:8004" # Dev Portal /files traffic over HTTPS, assuming the Dev Portal is enabled.
      - "8447:8447" # Dev Portal /files traffic over HTTPS, assuming the Dev Portal is enabled.

  ###############################################
  ########### Simple Microservices###############
  ###############################################

  ###################################
  # Patient: The Patient microservice
  ###################################
  Patient:
    build:
      context: ./patient/
      dockerfile: patient.Dockerfile
    image: boborealmoon/patient:1.0
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:8889/patients
      # 'mysql+mysqlconnector://is213@localhost:3306/claims'
      PYTHONUNBUFFERED: 1
    # port map for those exposed 
    # ports:
    #   - "5000:5000"

  #################################
  # Employee: The Employees microservice
  #################################
  employee:
    build:
      context: ./employee/
      dockerfile: employee.Dockerfile
    image: boborealmoon/employee:1.0
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:8889/employees
      # 'mysql+mysqlconnector://is213@localhost:3306/employees'
    # ports:
    #   - "5000:5000"
    

  #################################
  # Inventory: The Inventory microservice
  #################################
  Inventory:
    build:
      context: ./inventory/
      dockerfile: inventory.Dockerfile
    image: boborealmoon/inventory:1.0
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:8889/inventory
      # 'mysql+mysqlconnector://is213@localhost:3306/inventory'
    ports:
      - "5000:5000"

  #################################
  # Claims: The Claims microservice
  #################################
  Claims:
    build:
      context: ./claims/
      dockerfile: claims.Dockerfile
    image: boborealmoon/claims:1.0
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:8889/claims
      # 'mysql+mysqlconnector://is213@localhost:3306/claims'
    # ports:
    #   - "5000:5000"

  #################################
  # Appointments: The Appointments microservice
  #################################
  Appointments:
    build:
      context: ./appointments/
      dockerfile: appointments.Dockerfile
    image: boborealmoon/appointments:1.0
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:8889/appointments
      # 'mysql+mysqlconnector://is213@localhost:3306/appointments'
    # ports:
    #   - "5000:5000"

  #################################
  # Order: The Order microservice
  #################################
  Order:
    build:
      context: ./order/
      dockerfile: order.Dockerfile
    image: boborealmoon/order:1.0
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:8889/orders
      # 'mysql+mysqlconnector://is213@localhost:3306/orders'

  #################################
  # Calendar: The Calendar microservice
  #################################
  Calendar:
    build:
      context: ./calendar/
      dockerfile: calendar.Dockerfile
    image: boborealmoon/calendar:1.0
    restart: always
    environment:
      dbURL: mysql+mysqlconnector://is213@host.docker.internal:8889/calendar
      # 'mysql+mysqlconnector://is213@localhost:3306/calendar'
  #   # ports:
  #   #   - "5000:5000"

  ###################################
  # Error: The Error microservice
  ###################################
  error:
    build:
      context: ./error/
      dockerfile: error.Dockerfile
    image: boborealmoon/error:esd
    restart: always
    depends_on:
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      e_queue_name: Error
      PYTHONUNBUFFERED: 1

  #################################################
  # Activity Log: The Activity Log microservice
  #################################################
  activity_log:
    build:
      context: ./activity_log/
      dockerfile: activity_log.Dockerfile
    image: boborealmoon/activity_log:esd
    restart: always
    depends_on:
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      a_queue_name: Activity_Log
      PYTHONUNBUFFERED: 1


  ###############################################
  ###########Complex Microservices###############
  ###############################################

  ###############################################
  # Submit Claims: The Submit Claims program
  ###############################################
  submit_claims:
    image: boborealmoon/submit_claims:1.0
    depends_on:
      - Claims 
      - Appointments
    environment:
      appointments_url = "http://appointments:5000/appointments"
      claims_url = "http://claims:5002/new_claim"


  ###############################################
  # Place Order: The Place Order microservice
  ###############################################
  Submit_claims:
    build:
      context: ./submit_claims/
      dockerfile: submit_claims.Dockerfile
    image: boborealmoon/submit_claims:esd
    restart: always
    depends_on:
      - Claims
      - Appointments
      - activity_log
      - error
      - rabbitmq
    environment:
      rabbit_host: rabbitmq
      rabbit_port: 5672
      order_URL: http://order:5001/order
      shipping_record_URL: http://shipping_record:5002/shipping_record 
      PYTHONUNBUFFERED: 1
    ports:
      - "5100:5100"